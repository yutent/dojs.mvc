/**
 * 路由
 * @authors yutent (yutent@doui.cc)
 * @date    2015-10-01 19:11:19
 *
 */
"use strict";

let ruleRegExp = /(:id)|(\{id\})|(\{id:([A-Za-z\d\,\[\]\{\}\-\+\*\?\!:\^\$]*)\})/g;

class Router{

    constructor(){
        this._error = function(){}
        Response.set('Content-Type', 'text/html');
    }

    /**
     * [init 启动路由,自动加载第一级控制器]
     */
    init(){
        this.route('/:id/', function(c){
            try{
                let App = require(APPS + c)
                App && new App(c)                
            }catch(e){
                Response.error(e + '')
            }
        })
    }

    /**
     * [route 总路由]
     * @param  {Str}    rule     [路由规则]
     * @param  {Fn}     callback [回调]
     */
    route(rule, callback){
        let res = _route(rule, Request.app)
        res && callback(res)
    }

    /**
     * [get 控制器路由]
     * @param  {Str}    rule     [路由规则]
     * @param  {Fn}     callback [回调]
     */
    get(rule, callback){

        let res = _route(rule, Request.path)
        if(res)
            callback.apply(callback, res)
        else
            this._error()
    }

    /**
     * [error 错误回调]
     * @param  {Function} callback [description]
     */
    error(callback){
        this._error = callback
    }


}

function getRegExp(rule, opts){
    let res = rule.replace(ruleRegExp, function(m, p1, p2, p3, p4){
            let w = '([\\w\.\-]'
            if(p1 || p2){
                return w + '+)'
            }else{
                if(!/^\{[\d\,]+\}$/.test(p4)){
                    w = '('
                }
                return w + p4 + ')'
            }
        })
    res = res.replace(/(([^\\])([\/]+))/g, '$2\\/')
            .replace(/(([^\\])([\.]+))/g, '$2\\.')
            .replace(/(([^\\])([\-]+))/g, '$2\\-')
            .replace(/(\(.*)(\\[\-]+)(.*\))/g, '$1-$3')

    res = new RegExp('^' + res + '$')
    return res
}

function _route(rule, path){
    if(rule.charAt(0) !== "/")
        return Response.error(`character '/' must be in front of router rule[${rule}]`);

    rule = rule.replace(/^[\/]+|[\/]+$|\s+/g, '');

    let _regexp = getRegExp(rule)
    let matchs = path.match(_regexp)

    if(matchs)
        matchs.shift()

    return matchs
}



module.exports = Router