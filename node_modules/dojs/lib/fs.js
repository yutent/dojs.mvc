/**
 * 
 * @authors yutent (yutent@doui.cc)
 * @date    2015-12-28 14:28:38
 *
 */
"use strict";


class FileSystem {

    constructor(){

    }

    /**
     * [read 文件读取]
     * @param  {string} file [文件路径]
     */
    read(file){
        if(!file)
            return null
        
        try{
            return libs.FS.readFileSync(file)
        }catch(e){
            return null
        }
    }

    /**
     * [open 读取整个目录(不遍历子目录)]
     * @param  {string} path [目标路径]
     * @return {array}      [返回目标目录所有文件名和子目录名, 包括'.'和'..']
     */
    open(path){
        try{
            return libs.FS.readdirSync(path)
        }catch(e){}
        
    }

    /**
     * [append 在文件行后插入一行内容, 文件不存在则自动创建]
     * @param  {string} file [文件路径]
     * @param  {string} str  [要写入的内容]
     */
    append(file, str){
        let updir = libs.PATH.parse(file).dir
        if(!this.isdir(updir))
            this.mkdir(updir)

        try{
            libs.FS.appendFileSync(file, str)
        }catch(e){}
    }

    /**
     * [write 写文件,文件不存在则创建(如果文件存在则会覆盖整个文件)]
     * @param  {string} file [目录路径]
     * @param  {string|buffer} data [要写入的数据]
     */
    write(file, data){
        let updir = libs.PATH.parse(file).dir
        if(!this.isdir(updir))
            this.mkdir(updir)
        try{
            libs.FS.writeFileSync(file, data)
        }catch(e){}
    }


    //修改权限
    chmod(path, mode){
        libs.FS.chmodSync(path, mode)
    }
    

    /**
     * [mv 移动文件,兼具重命名功能]
     * @param  {String} from [原路径/原名]
     * @param  {String} to   [目标路径/新名]
     */
    mv(from, to){
        let _this = this
        let updir = libs.PATH.parse(to).dir
        if(!this.isdir(updir))
            this.mkdir(updir)

        try{
            libs.FS.renameSync(from, to)
        }catch(e){
            let r = libs.FS.createReadStream(from)
            let w = libs.FS.createWriteStream(to)

            r.pipe(w)
            r.on('end', function() {
                _this.rm(from)
            })
        }
    }

    /**
     * [rm 删除文件/目录]
     * @param  {String} from [源文件/目录路径]
     */
    rm(from){
        try{
            libs.FS.unlinksync(from)
        }catch(e){}
    }


    /**
     * [isdir 判断目标是否为目录]
     * @param  {String} path [目标路径]
     */
    isdir(path){
        try{
            return libs.FS.lstatSync(path).isDirectory()
        }catch(e){
            return false
        }
    }


    /**
     * [mkdir 新建目录]
     * @param  {String} dir [目标路径]
     */
    mkdir(dir){
        let updir = libs.PATH.parse(dir).dir
        if(!updir)
            return

        if(this.isdir(updir)){
            try{
                libs.FS.mkdirSync(dir)
            }catch(e){}
        }else{
            try{
                this.mkdir(updir)
                this.mkdir(dir)
            }catch(e){}
        }
    }

    /**
     * [exists 判断目标(文件/目录)是否存在]
     * @param  {String} file [目标路径]
     */
    exists(file){
        return libs.FS.existsSync(file)
    }



}


module.exports = new FileSystem