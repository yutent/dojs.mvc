/**
 * 框架核心
 * @authors yutent (yutent@doui.cc)
 * @date    2015-11-25 18:06:14
 *
 */
"use strict";

require('dojs-extend') //加载拓展方法

let http = require('http')
let Cookie = require('dojs-cookie')
class Mvc {

    constructor(basedir){

        if(!basedir)
            return console.error('`basedir` is undefined')

        process.setMaxListeners(0)

        global.BASE = basedir //站点根目录
        global.APPS = BASE + 'apps/' //应用目录
        global.DATA = BASE + 'data/' //数据/缓存目录
        global.VIEWS = BASE + 'views/' //模板目录
        global.PUB = BASE + 'public/' //静态文件目录
        global.UPLOAD = PUB + 'upload/' //上传目录

        global.dojs = require('./config.json') //注册框架全局配置变量

        global.libs = {
            SEC: require('dojs-crypto'),
            LOG: require('./log'),
            CO: require('co')
        }
        global.Fs = require('dojs-fs') //注册fs文件操作类
        global.Log = new libs.LOG() //注册log操作类
    }

    //初始化框架全局方法
    static init(){
        global.Mongo = require('dojs-mongo') //加载mongo操作类
        global.Mysql = require('dojs-mysql') //加载mysql操作类
        global.Controller = require('./controller') //加载基控制器
        global.Email = require('./sendmail') //加载email发送类
    }


/*------------------------------------------------------------------------*/

    //配置框架
    use(key, val){
        if(!key)
            return

        try{
            if(key.indexOf('.') !== -1)
                eval(`dojs.${key} = ${JSON.stringify(val)}`)
            else
                dojs[key] = val
        }catch(e){
            Log.error(e.stack)
        }
    }


    //启动http服务
    start(){
        Mvc.init()

        dojs.domain = dojs.domain || dojs.website
        dojs.session.domain = dojs.session.domain || dojs.domain

        http.createServer((req, res) => {

            global.Response = new (require('dojs-response'))(req, res)
            global.Request = new (require('dojs-request'))(req, res)

            //异常捕获,输出到header的'X-debug'字段中
            process.on('uncaughtException', err => {
                let msg = dojs.debug ? err.stack : err
                Response.error(msg, 500)
            })
            switch(dojs.session.type){
                case 'redis':
                    global.Session = require('./redisSession')
                    break
                default:
                    global.Session = require('./session')
                    break
            }

            Response.set('X-Powered-By', 'doJS');

            let Coo = new Cookie(req, res)

            global.cookie = function(key, val, options){
                let opts = {domain: dojs.domain}
                
                if(typeof key !== 'string')
                    return Response.debug(`argument key must be a string in cookie() ${typeof key} given`)

                if(arguments.length === 1)
                    return Coo.get(key)

                val += ''
                opts = opts.merge(options)

                if(opts.expires)
                    opts.maxAge = opts.expires

                if(!val)
                    opts.maxAge = -1

                Coo.set(key, val, opts)
            }
            
            //启用SESSION
            Session.start()
            
            //初始化路由
            global.Router = new (require('./router'))
            Router.init()

        }).listen(dojs.port)
    }
}


module.exports = Mvc