/**
 * 框架核心
 * @authors yutent (yutent@doui.cc)
 * @date    2015-11-25 18:06:14
 *
 */
"use strict";

require('dojs-extend') //加载拓展方法

let http = require('http')
let cookies = require('dojs-cookie')

class Dojs {

    constructor(basedir){

        if(!basedir)
            return console.error('`basedir` is undefined')

        process.setMaxListeners(0)

        global.BASE = basedir //站点根目录
        global.APPS = BASE + 'apps/' //应用目录
        global.DATA = BASE + 'data/' //数据/缓存目录
        global.PUB = BASE + 'public/' //静态文件目录
        global.UPLOAD = PUB + 'upload/' //上传目录

        global.dojs = {} //注册框架全局配置变量
        dojs = dojs.merge(require('./config'))

        global.libs = {
            PATH: require('path'),
            SEC: require('dojs-crypto'),
            URL: require('url'),
            LOG: require('./log'),
            // socket: require('socket.io'),
            QS: require('querystring'),
            UTIL: require('util'),
            EV: require('events'),
            CO: require('co')
        }
        global.Fs = require('dojs-fs') //注册fs文件操作类
        global.Log = new libs.LOG() //注册log操作类
    }

    //初始化框架全局方法
    static init(){
        global.Mongo = require('./baseMongo') //加载mongo操作类
        global.Mysql = require('./baseMysql') //加载mysql操作类
        global.Rethink = require('./baseRethink') //加载Rethink操作类
        global.Controller = require('./baseController') //加载基控制器
        global.Email = require('./sendmail') //加载email发送类
    }


    /**
     * [cookie cookie操作]
     */
    static cookie(key, val, options){

        let Cookie = new cookies()
        let opts = {domain: dojs.domain || dojs.website}
        
        if(typeof key !== 'string')
            return Response.debug(`argument key must be a string in cookie() ${typeof key} given`)

        if(arguments.length === 1)
            return Cookie.get(key)

        val += ''
        opts = opts.merge(options)

        if(opts.expires)
            opts.maxAge = opts.expires

        if(!val)
            opts.maxAge = -1

        Cookie.set(key, val, opts)

    }


    //注册路由，启动框架
    static run(){
        Response.set('X-Powered-By', 'doJS');

        global.cookie = Dojs.cookie
        Session.start()
        
        //初始化路由
        global.Router = new (require('./router'))
        Router.init()
    }

/*--------------------------------------------------------------------------------*/
/*                                                                                */
/*--------------------------------------------------------------------------------*/

    //配置框架
    use(key, val){
        if(!key)
            return

        try{
            if(key.indexOf('.') !== -1)
                eval(`dojs.${key} = ${JSON.stringify(val)}`)
            else
                dojs[key] = val
        }catch(e){
            Log.error(e.stack)
        }
    }


    //启动http服务
    start(){
        Dojs.init()

        http.createServer((req, res) => {

            global.Response = new (require('dojs-response'))(res)
            global.Request = new (require('dojs-request'))(req, res)

            //异常捕获,输出到header的'X-debug'字段中
            process.on('uncaughtException', err => {
                let msg = dojs.debug ? err.stack : err
                Response.error(msg, 500)
            })
            switch(dojs.session.type){
                case 'redis':
                    global.Session = require('./redisSession')
                    break
                default:
                    global.Session = require('./session')
                    break
            }

            Dojs.run()

        }).listen(dojs.port)
    }
}


module.exports = Dojs