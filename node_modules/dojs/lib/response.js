/**
 * 向客户端发送信息
 * @authors yutent (yutent@doui.cc)
 * @date    2015-12-28 17:12:52
 *
 */
"use strict";

let charsetRegExp = /;\s*charset\s*=/

class Response {

    constructor(res){
        this.res = res
        this.end = false //整个框架结束输出, 避免this.error和this.send 同时出现导致的程序崩溃
    }

    /**
     * [error http 错误显示]
     * @param  {Num} code [http错误码]
     * @param  {Str} msg  [错误提示信息]
     */
    error(msg, code){
        if(this.end)
            return Log.error(msg)

        this.end = true

        code = code || 500
        msg += ''
        msg = msg.replace(/[\n]+/g, '')
        this.res.writeHead(code, {'X-debug': msg, 'Content-Type': 'text/html; charset=utf-8'})
        this.res.end('')
    }


    //输出调试信息
    debug(str){
        str += ''
        this.set('X-debug', str)
    }


    /**
     * [get 读取已写入的头信息]
     */
    get(key){
        return this.res.getHeader(key)
    }


    /**
     * [set 设置头信息]
     */
    set(key, val){
        if(arguments.length === 2){
            let value = Array.isArray(val) ? val.map(String) : String(val)

            if(key.toLowerCase() === 'content-type' && !charsetRegExp.test(value))
                value += '; charset=utf-8'

            this.res.setHeader(key, value);
        }else{
            for(let i in key) {
                this.set(i, key[i]);
            }
        }
        return this;
    }

    /**
     * [append 往header插入信息]
     * @param  {[type]} key [description]
     * @param  {[type]} val [description]
     */
    append(key, val) {
        let prev = this.get(key);
        let value = val;

        if(prev){
            if(Array.isArray(prev))
                value = prev.concat(val)
            else if(Array.isArray(val))
                value = [prev].concat(val)
            else
                value = [prev, val]
        }
        return this.set(key, value);
    }

    //页面跳转
    location(url){
        this.res.writeHead(302, {'Location': '//' + dojs.website + '/' + url})
        this.res.end()
    }


    //以html格式向前端输出内容
    rander(data){
        data += ''

        this.set('Content-Type', 'text/html')
        this.set('Content-Length', Buffer.byteLength(data))
        this.res.end(data)
    }

    /**
     * [send json格式输出]
     * @param  {Num}        code     [返回码]
     * @param  {Str}        msg      [提示信息]
     * @param  {Str/Obj}    data     [额外数据]
     * @param  {Str}        callback [回调函数名]
     */
    send(code, msg, data, callback){
        if(this.end)
            return Log.error('one error occur before send')

        this.end = true

        if(data === undefined)
            data = []

        if(!libs.UTIL.isNumber(code)){
            msg = code
            code = 0
        }else if(typeof msg === 'object' && !empty(msg)){
            data = msg
            msg = 'success'
            code = 1
        }

        let output = {
                code: code,
                msg: msg,
                data: data
            }
        output = JSON.stringify(output)

        this.set('Content-Type', 'application/json')
        this.set('Content-Length', Buffer.byteLength(output))
        if(callback){
            callback = callback.replace(/[^\w\-\.]/, '')
            this.res.end(callback + '(' + output + ')')
        }else{
            this.res.end(output)
        }
    }



}



module.exports = Response