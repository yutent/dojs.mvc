/**
 * mysql操作类
 * @authors yutent (yutent@doui.cc)
 * @date    2015-11-24 11:31:55
 *
 */
"use strict";

let mysql = require('mysql')

class baseMysql{

    /**
     * [constructor 构造数据库连接]
     */
    constructor(conf){
        let _this = this
        this.log = new libs.LOG('mysql.log')
        this.pool = mysql.createPool({
            host: conf.host,
            port: conf.port,
            user: conf.user,
            password: conf.passwd,
            database: conf.db
        })

    }

    /**
     * [query sql语句执行]
     * @param  {[type]}   sql       [sql语句]
     * @param  {Function} callback [回调]
     */
    query(sql, callback){
        let _this = this

        if(typeof sql !== 'string'){
            this.log.error(`query error, argument sql must be string. ${typeof sql} given`)
            return callback(null)
        }

        this.pool
            .getConnection(function(e, db){
                if(e){
                    _this.log.error('mysql connect error, ' + e)
                    return callback(e)
                }

                db.query(sql, function(e, res){
                    if(e){
                        _this.log.error('insert error, ' + e)
                        return callback(e)
                    }

                    if(res.length < 1)
                        res = null

                    callback && callback(e, res)
                    db.release()

                })

        })
    }


    /**
     * [find 基础的数据查询, 支持简单的联表查询]
     * @param  {[type]}   conf     [要查询的信息]
     * @param  {Function} callback [回调,返回结果集]
     *
     * e.g.
     * .find({
     *     table: '',
     *     select: ['a', 'b'],
     *     where: [{ //数组格式,可以组成多个条件,默认查询全表 [可选]
     *         join: 'OR', //条件关系 AND, OR
     *         op: '>', //关系符,如 =, >, <, <=, >=
     *         key: 'aa',
     *         val: 23
     *     }],
     *     sort: { //排序, key是要排序的字段,value是排序方式, 1顺序,-1逆序 [可选]
     *         a: 1,
     *         b: -1
     *     },
     *     limit: { // 查询范围,可用于分页 [可选]
     *         start: 0,
     *         size: 10
     *     }
     * })
     */
    find(conf, callback){
        let _this = this

        if(!conf.table){
            _this.log.error('find error, empty table')
            return callback(null)
        }

        let fields = '' //要返回的字段
        if(!conf.hasOwnProperty('select') || Object.empty(conf.select))
            fields = '*'
        else
            fields = conf.select.join(',')

        let sql = 'SELECT ' + fields

        let table = '' //要查询的表
        if(typeof conf.table === 'string'){ //单表
            table = ' FROM ' + conf.table
        }else{ //联表
            table = ' FROM ' + conf.table.master
            for(let join of conf.table.unite){
                table += ` LEFT JOIN  ${join.table} ON ${join.on} `
            }
        }
        sql += table

        //查询条件
        sql += this.parseWhere(conf.where)

        let sort = '' //排序
        if(conf.sort && typeof conf.sort === 'object'){
            sort = ' ORDER BY '
            for(let i in conf.sort){
                let c = ''
                if(conf.sort[i] === -1)
                    c = 'DESC'

                sort += `${i} ${c},`
            }
            sort = sort.slice(0, -1)
        }
        sql += sort

        let limit = '' //查询范围
        if(conf.hasOwnProperty('limit')){
            let start = conf.limit.hasOwnProperty('start') ?  conf.limit.start : 0
            let size = conf.limit.hasOwnProperty('size') ?  conf.limit.size : 1
            limit = ` LIMIT ${start},${size} `
        }
        sql += limit

        this.pool
            .getConnection(function(e, db){

                if(e){
                    _this.log.error('mysql connect error, ' + e)
                    return callback(e)
                }

                db.query(sql, function(e, res){
                    if(e){
                        _this.log.error('find error, ' + e)
                        return callback(e)
                    }

                    callback && callback(e, res)
                    db.release()
                })

            })
    }

    /**
     * [findOne 查找一条记录, 参数同 find]
     */
    findOne(conf, callback){

        this.find({
            table: conf.table,
            select: conf.select || null,
            where: conf.where || '',
            sort: conf.sort || '',
            limit: {start: 0, size: 1}
        }, function(e, list){
            callback && callback(null, list && list[0] || null)
        })
    }

    /**
     * [count 计算结果总数, 参数同findOne]
     */
    count(conf, callback){
        this.find({
            table: conf.table,
            select: ['count(*)'],
            where: conf.where || ''
        }, function(e, res){
            callback && callback(null, res && res[0]['count(*)'] || 0)
        })
    }

    /**
     * [insert 插入数据,单条]
     * @param  {[object]}   conf     [要插入的信息,{table: '', data: {}} ]
     * @param  {Function} callback [回调, 返回最后插入的数据的id]
     * 
     * eg.
     * .insert({
     *     table: 'test',
     *     data: {aa: 123, bb: 456}
     * }, function(id){...})
     */
    insert(conf, callback){
        let _this = this

        if(!conf.table || (typeof conf.table !== 'string')){
            _this.log.error('insert error, empty table')
            return callback(null)
        }

        let sql = 'INSERT INTO ' + conf.table + ' ('
        let keys = []
        let vals = []

        for(let i in conf.data){
            keys.push(i)
            vals.push(conf.data[i])
        }
        let fields = keys.join(',')
        let values = ' "' + vals.join('","') + '" '

        sql += fields + ') VALUES (' + values + ')'

        this.pool
            .getConnection(function(e, db){

                if(e){
                    _this.log.error('mysql connect error, ' + e)
                    return callback(e)
                }

                db.query(sql, function(e, res){
                    if(e){
                        _this.log.error('insert error, ' + e)
                        return callback(e)
                    }

                    callback && callback(e, res.insertId)
                    db.release()
                })
            })
    }

    /**
     * [insert 基础的数据修改]
     * @param  {[object]}   conf     [要修改的信息, {table: '', where: [], data: {}}]
     * @param  {Function} callback [回调, 返回影响的条数]
     * 
     * eg.
     * .update({
     *     table: 'test',
     *     data: {aa: 123, bb: 456},
     *     where: [{ //数组格式,可以组成多个条件
     *         join: 'OR', //条件关系 AND, OR
     *         op: '>', //关系符,如 =, >, <, <=, >=
     *         key: 'aa',
     *         val: 23
     *     }]
     * }, function(nums){...})
     */
    update(conf, callback){
        let _this = this

        if(!conf.table || (typeof conf.table !== 'string')){
            _this.log.error('update error, empty table')
            return callback(e)
        }

        let sql = 'UPDATE ' + conf.table

        let fields = [] //要更新的字段
        let set = ' SET '
        for(let i in conf.data){
            fields.push(i + '="' + conf.data[i] + '"')
        }
        set += fields.join(',')
        sql += set

        sql += this.parseWhere(conf.where)

        this.pool
            .getConnection(function(e, db){

                if(e){
                    _this.log.error('mysql connect error, ' + e)
                    return callback(e)
                }

                db.query(sql, function(e, res){
                    if(e){
                        _this.log.error('update error, ' + e)
                        return callback(e)
                    }

                    callback && callback(null, res.affectedRows)
                    db.release()
                })
            })
    }

    /**
     * [remove 基础的数据删除]
     * @param  {[type]}   conf     [要删除的信息, {table: '', where: []}]
     * @param  {Function} callback [回调, 返回影响的条数]
     * 
     * eg.
     * .update({
     *     table: 'test',
     *     where: [{ //数组格式,可以组成多个条件
     *         join: 'OR', //条件关系 AND, OR
     *         op: '>', //关系符,如 =, >, <, <=, >=
     *         key: 'aa',
     *         val: 23
     *     }]
     * }, function(nums){...})
     */
    remove(conf, callback){
        let _this = this

        if(!conf.table || (typeof conf.table !== 'string')){
            _this.log.error('remove error, empty table')
            return callback(e)
        }

        let sql = 'DELETE FROM ' + conf.table
        
        if(conf.where)
            sql += this.parseWhere(conf.where)

        this.pool
            .getConnection(function(e, db){

                if(e){
                    _this.log.error('mysql connect error, ' + e)
                    return callback(e)
                }

                db.query(sql, function(e, res){
                    if(e){
                        _this.log.error('remove error, ' + e)
                        return callback(e)
                    }

                    callback && callback(null, res.affectedRows)
                    db.release()
                })
            })
    }

    /**
     * [parseWhere 格式化where条件]
     * @param  [array] arr [条件数组]
     */
    parseWhere(arr){
        if(typeof arr !== 'object' || Object.empty(arr))
            return ' '

        let where = ''
        for(let item of arr){
            item.join = item.join || 'AND'
            item.op = item.op || '='
            
            if(!/(^\(SELECT\s+.*\)$)|^`/.test(item.val) && item.op !== 'IN')
                item.val = `"${item.val}"`
            
            where += `${item.join.toUpperCase()} ${item.key} ${item.op} ${item.val} `
        }

        where = ' WHERE ' + where.trim().replace(/^(AND|OR)/, ' ') + ' '
        return where
    }

}




module.exports = baseMysql