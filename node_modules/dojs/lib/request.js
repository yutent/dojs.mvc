/**
 * 接收客户端发送上来的信息
 * @authors yutent (yutent@doui.cc)
 * @date    2015-12-28 17:33:40
 *
 */
"use strict";

let formidable = require('formidable')
class Request {

    constructor(req){
        this.req = req
        this._fixUrl()
    }

    //修正请求的url
    _fixUrl(){
        let url = libs.URL.parse(this.req.url).pathname.slice(1).replace(/[\/]+$/, '')
        let _route = ''
        let _path = ''

        if(/[^\w\-\/\.]/.test(url))
            return Response.error('url[' + url + '] contains illegal characters', 401)
        
        //修正url中可能出现的"多斜杠",并跳转到修正后的地址
        let pathFixed = url.replace(/[\/]+/g, '/');
        if(pathFixed != url)
            return Response.location(pathFixed, url)

        let pathArr = url.split('/')
        if(!pathArr[0] || pathArr[0] == '')
            pathArr[0] = 'index'

        if(pathArr[0].indexOf('.') !== -1){
            _route = pathArr[0].slice(0, pathArr[0].indexOf('.'))
            //如果_route为空(这种情况一般是url前面带了个"."造成的),则自动默认为index
            if(!_route || _route == '')
                _route = 'index'
        }else{
            _route = pathArr[0]
        }

        pathArr.shift()
        _path = pathArr.join('/')

        this.url = url
        this.path = _path
        this.app = _route
    }

    /**
     * [_get 同php的$_GET]
     */
    _get(key, xss){
        xss = xss === undefined ? true : false
        let para = libs.URL.parse(this.req.url).query
        para = libs.QUERY.parse(para)
        if(xss){
            for(let i in para){
                para[i] = para[i].xss()
            }
        }
        return para.hasOwnProperty(key) ? para[key] : null
    }

    /**
     * [_post 接收post, 需要 yield ]
     * @param  {Str}    key      [字段]
     */
    _post(key, xss){

        let postType = /boundary|json|form\-data/.test(this.headers('content-type')) ? 1 : 2
        let para = {}

        xss = xss === undefined ? true : xss

        if(postType === 1){

            return fn => {
                if(!Fs.isdir(dojs.tmpdir))
                    Fs.mkdir(dojs.tmpdir)

                let form = new formidable.IncomingForm()
                form.uploadDir = dojs.tmpdir
                form.parse(this.req)

                form.on('field', (name, value) => {
                    if(xss)
                        para[name] = value.xss()
                    else
                        para[name] = value
                })

                form.on('file', (name, file) => {
                    para[name] = file
                })

                form.on('error', err => {
                    Log.error(err + '')
                })

                form.on('end', err => {
                    if(key)
                        return fn(err, para.hasOwnProperty(key) ? para[key] : null)
                    else
                        return fn(err, para)
                })
            }

            
        }else{

            return fn => {

                let postData = ''

                this.req.on('data', chunk => {
                    postData += chunk
                })

                this.req.on('end', err => {
                    para = libs.QUERY.parse(postData)

                    if(!/urlencoded/.test(_this.headers('content-type')))
                        para = Object.keys(para)[0]

                    try{
                        para = JSON.parse(para)
                    }catch(e){}

                    if(xss){
                        if(typeof para == 'string'){
                            para = para.xss()
                        }else{
                            for(let i in para){
                                para[i] = para[i].xss()
                            }
                        }
                    }

                    if(key)
                        return fn(err, para.hasOwnProperty(key) ? para[key] : null)
                    else
                        fn(err, para)
                    
                })

            }
        }

    }

    //获取响应头
    headers(key){
        key = key.toLowerCase()
        return this.req.headers[key]
    }

    //获取客户端IP
    ip(){
        return this.headers('x-real-ip') || this.headers('x-forwarded-for') || this.req.connection.remoteAddress.replace('::ffff:', '')
    }

}


module.exports = Request