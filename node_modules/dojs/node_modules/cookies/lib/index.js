/**
 *
 * @authors yutent (yutent@doui.cc)
 * @date    2015-11-17 13:49:25
 *
 */
"use strict";

class Format{

    constructor(){
        this.keyRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/
        this.splitRegExp = /; */
        this.encode = encodeURIComponent
        this.decode = decodeURIComponent
    }

    /**
     * [parse 格式化字符串]
     */
    parse(str){
        if(typeof str !== 'string')
            return {}

        let _this = this
        let obj = {}
        let pairs = str.split(this.splitRegExp)

        for(let item of pairs){
            let id = item.indexOf('=')
            if(id < 0)
                return

            let key = item.slice(0, id).trim()
            let val = item.slice(++id, item.length).trim()

            if(val[0] == '"')
                val = val.slice(1, -1)

            if(!obj.hasOwnProperty(key))
                obj[key] = _this.decode(val)
        }
        return obj
    }

    /**
     * [serialize 序列化对象]
     */
    serialize(key, val, opts){

        if(!this.keyRegExp.test(key))
            return Response.error('argument key is invalid in serialize')

        val = this.encode(val)
        opts = opts || {}

        if(val && !this.keyRegExp.test(val))
            return Response.error('argument key is invalid in serialize')

        let pairs = [key + '=' + val]

        if(opts.hasOwnProperty('maxAge') && opts.maxAge){ //有效期
            opts.maxAge = opts.maxAge >> 0
            pairs.push('Max-Age=' + opts.maxAge)
        }

        if(opts.hasOwnProperty('expires') && opts.expires){ //有效期, 已不建议使用,改用 max-age
            pairs.push('Expires=' + opts.expires.toUTCString())
        }

        if(opts.hasOwnProperty('domain')){ //域
            if(!this.keyRegExp.test(opts.domain))
                return Response.error('domain error in set-cookie')

            pairs.push('Domain=' + opts.domain)
        }

        if(opts.hasOwnProperty('path')){ //目录
            if(!this.keyRegExp.test(opts.path))
                return Response.error('path error in set-cookie')

            pairs.push('Path=' + opts.path)
        }else{
            pairs.push('Path=/')
        }

        if(opts.httpOnly)
            pairs.push('HttpOnly')

        if(opts.secure)
            pairs.push('Secure')

        if(opts.firstPartyOnly)
            pairs.push('First-Party-Only')


        return pairs.join('; ')
    }
}


class Cookies {

    constructor() {
    }

    /**
     * [get 获取cookie]
     */
    _get(key) {
        if (!key)
            return null

        if (typeof key !== 'string')
            return Response.error(`argument key must be a string in cookie._get(). ${typeof key} given`);

        let cookieStr = Request.headers('cookie')

        if (!cookieStr)
            return null

        let cookieObj = new Format().parse(cookieStr)

        if (cookieObj.hasOwnProperty(key))
            return cookieObj[key]
        else
            return null
    }

    /**
     * [set 设置cookie]
     * @param {[string]} key 
     * @param {[string/number]} val
     * @param {[object]} opts [设置cookie的额外信息,如域,有效期等]
     */
    _set(key, val, opts) {
        opts = opts || {}

        let cookieStr = new Format().serialize(key, val, opts)

        Response.append('set-cookie', cookieStr) 

    }

}


module.exports = Cookies