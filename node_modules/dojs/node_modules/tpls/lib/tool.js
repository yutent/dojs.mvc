/**
 * 模板引擎预处理，对dojs框架有依赖
 * @authors yutent (yutent@doui.cc)
 * @date    2016-01-02 21:26:49
 *
 */

"use strict";

class Tool {

    constructor(conf){
        this.conf = {
            delimiter: ['<!--{', '}-->'], //模板界定符
            labels: [ //支持的标签类型
                'include([^\\{\\}\\(\\)]*?)', //引入其他文件 0
                'each([^\\{\\}\\(\\)]*?)', //each循环开始 1
                '/each', //each循环结束 2
                'if([^\\{\\}\\/]*?)', //if开始 3
                'elseif([^\\{\\}\\/]*?)', //elseif开始 4
                'else', //else开始 5
                '/if', //if结束 6
                'var([\\s\\S])*?', //定义变量 7
                '=([^\\{\\}]*?)', //普通变量 8
            ]
        }

        this.conf = this.conf.merge(conf)

        //过滤器
        this.filters = {
            html: function(str){
                str += ''
                return str.tohtml()
            },
            truncate: function(str, len, truncation){
                str += ''
                //防止模板里参数加了引号导致异常
                len = len.replace(/['"]/g, '') - 0
                if(str.length <= len || len < 1)
                    return str

                if(truncation == undefined)
                    truncation = '...'
                else //去除参数里多余的引号
                    truncation = truncation.replace(/^['"]|['"]$/g, '')

                return str.slice(0, len) + truncation
            },
            lower: function(str){
                str += ''
                return str.toLowerCase()
            },
            upper: function(str){
                str += ''
                return str.toUpperCase()
            },
            date: function(str, format){
                str -= 0
                //去除参数里多余的引号
                format = format.replace(/^['"]|['"]$/g, '')
                return gmdate(format, str)
            }

        }

    }

    //设置 配置信息
    config(key, val){
        key += ''
        if(empty(key) || empty(val))
            return
        this.conf[key] = val
    }

    //生成正则
    exp(str){
        return new RegExp(str, 'g')
    }

    //生成模板标签
    label(id){
        let conf = this.conf
        let tag = conf.labels[id || 0]
        return this.exp(conf.delimiter[0] + tag + conf.delimiter[1])
    }

    //解析普通字段
    matchNormal(m, d){
        let _this = this
        let begin = this.exp('^' + this.conf.delimiter[0] + '[=\\s]?')
        let end = this.exp(this.conf.delimiter[1] + '$')

        m = m.replace(begin, '')
            .replace(end, '')
            .replace(/\|\|/g, "\t")

        let matches = m.split('|')
        let filter = matches.length == 1 ? '' : matches[1].trim()
        let txt = matches[0].replace(/\t/g, '||').trim()

        // 默认过滤HTML标签
        txt = txt.htmlspecialchars()

        if(filter){
            txt = (new Function('t', `return (${txt})`))(d)

            let args = filter.split(':')
            filter = args.splice(0, 1, `${txt}`)
        
            if(_this.filters.hasOwnProperty(filter)){
                txt = _this.filters[filter].apply(_this.filters, args)
            }
            return `\` + \`${txt}\`; tpl += \``
        }else{
            return `\` + (${txt}); tpl += \``
        }
    }

    //解析each循环
    matchFor(m){
        let begin = this.exp('^' + this.conf.delimiter[0] + 'each\\s+')
        let end = this.exp(this.conf.delimiter[1] + '$')

        m = m.replace(begin, '')
            .replace(end, '')

        m = m.trim()
        if(empty(m) || !/\sin\s/.test(m))
            Response.error('Wrong each loop')

        let each = 'for (let '
        let ms = m.split(' in ')
        let mi = ms[0].trim().split(' ')
        let mf = ms[1].trim() //要遍历的对象

        if(mi.length === 1){
            each += `${mi[0]} of ${mf}) { `
        }else{
            each += `${mi[0]} in ${mf}) { let ${mi[1]} = ${mf}[${mi[0]}]; tpl += \``
        }

        return `\`; ${each}`
    }

    //解析条件语句
    matchIf(m, d){
        let begin = this.exp('^' + this.conf.delimiter[0] + 'if\\s+')
        let end = this.exp(this.conf.delimiter[1] + '$')

        m = m.replace(begin, '')
            .replace(end, '')

        m = m.trim()
        if(empty(m))
            return `\`; tpl += \``

        return `\`; if (${m}){ tpl += \``
    }

    //解析条件语句
    matchElseIf(m, d){
        let begin = this.exp('^' + this.conf.delimiter[0] + 'elseif\\s+')
        let end = this.exp(this.conf.delimiter[1] + '$')

        m = m.replace(begin, '')
            .replace(end, '')

        m = m.trim()
        if(empty(m))
            return `\`;} else { tpl += \``

        return `\`; } else if (${m}){ tpl += \``
    }

    //解析变量定义
    matchVar(m){
        let begin = this.exp('^' + this.conf.delimiter[0] + 'var\\s+')
        let end = this.exp(this.conf.delimiter[1] + '$')



        m = m.replace(begin, '')
            .replace(end, '')
        
        m = m.trim()
        if(!empty(m) || /=/.test(m))
            m = 'let ' + m

        return `\`; ${m}; tpl += \``
    }

    //解析include
    matchInclude(m){
        let _this = this
        let begin = this.exp('^' + this.conf.delimiter[0] + 'include\\s+')
        let end = this.exp(this.conf.delimiter[1] + '$')

        m = m.replace(begin, '')
            .replace(end, '')
            .replace(/^['"]|['"]$/g, '')
            .replace(/\.tpl$/, '') //去掉可能出现的自带的模板后缀

        m += '.tpl' //统一加上后缀

        if(!Fs.exists(this.conf.path + m))
            Response.error('Can not find template "' + m + '"')

        let tpl = Fs.read(this.conf.path + m) + ''
        //递归解析include
        tpl = tpl.replace(/[\r\n\t]+/g, ' ') //去掉所有的换行/制表
                .replace(/\\/g, '\\\\')
                .replace(this.label(0), m1 => {
                    return this.matchInclude(m1)
                })

        return tpl
    }


    //解析模板
    parse(str, data){

        str = str.replace(/[\r\n\t]+/g, ' ') //去掉所有的换行/制表
                .replace(/\\/g, '\\\\')
                //解析include
                .replace(this.label(0), m => {
                    return this.matchInclude(m, data)
                })
                //解析each循环
                .replace(this.label(1), m => {
                    return this.matchFor(m, data)
                })
                //解析循环结束标识
                .replace(this.label(2), '\` } tpl += \`')
                //解析 if条件
                .replace(this.label(3), m => {
                    return this.matchIf(m, data)
                })
                .replace(this.label(4), m => {
                    return this.matchElseIf(m, data)
                })
                // parse the else
                .replace(this.label(5), '\`; } else { tpl += \`')
                //解析if条件结束标识
                .replace(this.label(6), '\`; } tpl += \`')
                //解析临时变量的定义
                .replace(this.label(7), m => {
                    return this.matchVar(m)
                })
                //解析普通变量/字段
                .replace(this.label(8), m => {
                    return this.matchNormal(m, data)
                })
                

        str = `"use strict"; let tpl=\`${str}\`; return tpl;`
        let view = new Function('t', str)
        return view(data)
    }

}


module.exports = Tool